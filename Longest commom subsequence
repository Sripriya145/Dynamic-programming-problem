Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.


dry code
 if(str1[i-1]==atr2[j-1])
    d[i][j]=1+d[i-1][j-1];
 else
   d[i][j]=max(d[i][j-1],d[i-1][j]);
   
   
   main code using dp
   initize the 1st row and col are zero
    vector<vector<int>>dp(n+1,vector<int>(m+1));
     for(int i=0;i<=n;i++)
   {
       for(int j=0;j<=m;j++)
       {
            if(i==0||j==0)
           {
               dp[i][j]=0;
           }
           else
           {
            if(str1[i-1]==str2[j-1])
              dp[i][j]=1+dp[i-1][j-1];
            else
             dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
           }
       }
   }
   cout<< dp[n][m];
